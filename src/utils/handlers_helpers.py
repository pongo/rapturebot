import random
from typing import Union, Optional

from src.config import CMDS, VALID_CMDS, CONFIG
from src.commands.khaleesi.khaleesi import Khaleesi
from src.utils.cache import cache, MONTH
from src.utils.logger_helpers import get_logger
from src.utils.telegram_helpers import get_chat_admins

logger = get_logger(__name__)


def is_command_enabled_for_chat(chat_id: Union[int, str], cmd_name: Optional[str],
                                default: Optional[bool] = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ —á–∞—Ç–µ. –í–∫–ª—é—á–∞—è —á–∞—Ç—ã —Å all_cmd=True.
    """
    if cmd_name is None:
        return True  # TODO: —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –ø–æ—á–µ–º—É —Ç—É—Ç True
    chat_id_str = str(chat_id)
    if chat_id_str not in CONFIG['chats']:
        return False
    chat_options = CONFIG['chats'][chat_id_str]
    if cmd_name in chat_options.get('enabled_commands', []):
        return True
    if cmd_name in chat_options.get('disabled_commands', []):
        return False
    if default:
        return default
    return chat_options.get('all_cmd', False)


class CommandConfig:
    def __init__(self, chat_id: int, command_name: str) -> None:
        self.config = None
        try:
            self.config = CONFIG['chats'][str(chat_id)]['commands_config'][command_name]
        except Exception:
            return

    def get(self, key):
        if not self.config:
            return None
        return self.config.get(key, None)


def is_valid_command(text):
    cmd = get_command_name(text)
    if cmd in VALID_CMDS:
        return cmd
    return None


def check_admin(bot, chat_id, user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞.

    –ò–¥–µ—Ç –¥–≤–∞ –≤–∏–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–π–¥–∏—à–Ω–∏–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ.
    2. –ß–µ—Ä–µ–∑ –∞–ø–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω–∫–∞ —É —é–∑–µ—Ä–∞.
    """
    if user_id in CONFIG['admins_ids']:
        return True

    admins = get_chat_admins(bot, chat_id)
    return any(user_id == admin.user.id for admin in admins)


def get_command_name(text):
    if text is None:
        return None
    lower = text.lower()
    if lower.startswith('/'):
        lower_cmd = lower[1:].split(' ')[0].split('@')[0]
        for cmd, values in CMDS['synonyms'].items():
            if lower_cmd in values:
                return cmd
        return lower_cmd
    else:
        if lower in CMDS['text_cmds']:
            return lower
    return None


def check_command_is_off(chat_id, cmd_name):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ª–∏ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤ —á–∞—Ç–µ.
    """
    all_disabled = cache.get(f'all_cmd_disabled:{chat_id}')
    if all_disabled:
        return True

    disabled = cache.get(f'cmd_disabled:{chat_id}:{cmd_name}')
    if disabled:
        return True
    return False


def send_chat_access_denied(bot, update) -> None:
    chat_id = update.message.chat_id

    # –µ—Å–ª–∏ —á–∞—Ç –µ—Å—Ç—å –≤ –∫–µ—à–µ, —Ç–æ –∑–Ω–∞—á–∏—Ç –º—ã —É–∂–µ –ø–∏—Å–∞–ª–∏ –≤ –Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    # –∏ —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ –∑–∞–Ω—è—Ç—å—Å—è –¥—Ä–∞–∫–æ–Ω–∏–∑–∞—Ü–∏–µ–π
    key = f'chat_guard:{chat_id}'
    cached = cache.get(key)
    if cached:
        text = update.message.text
        if text is None:
            return
        # –¥—Ä–∞–∫–æ–Ω–∏–∑–∏—Ä—É–µ–º 5% —Å–æ–æ–±—à–µ–Ω–∏–π
        if random.randint(1, 100) > 5:
            return
        khaleesed = Khaleesi.khaleesi(text, last_sentense=True)
        try:
            bot.send_message(chat_id, '{} üêâ'.format(khaleesed),
                             reply_to_message_id=update.message.message_id)
        except Exception:
            pass
        return

    # –Ω–æ–≤—ã–π –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —á–∞—Ç. –ø–∏—à–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. –ø–ª—é—Å –≤ –ª–æ–≥–∏ –∏–Ω—Ñ—É –æ —á–∞—Ç–µ
    logger.info(f'Chat {chat_id} not in config. Name: {update.message.chat.title}')
    try:
        admins = ', '.join((f'[{admin.user.id}] @{admin.user.username}' for admin in
                            bot.get_chat_administrators(update.message.chat_id)))
        logger.info(f'Chat {chat_id} admins: {admins}')
        bot.send_message(chat_id,
                         '–ü—Ä–∏–≤–µ—Ç —Ä–µ–±—è—Ç–∞ üëã!\n\n–í–∞—à–µ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –ø–æ—ç—Ç–æ–º—É —è –º–æ–≥—É –ª–∏—à—å –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥—Ä–∞–∫–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—åüêâ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–æ–∏–º –∞–¥–º–∏–Ω–æ–º, —á—Ç–æ–±—ã –æ–Ω –¥–æ–±–∞–≤–∏–ª –≤–∞—à —á–∞—Ç –≤ –∫–æ–Ω—Ñ–∏–≥ ‚Äî —Ç–æ–≥–¥–∞ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã, –∞ –¥—Ä–∞–∫–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–∏—Ç—Å—è.')
    except Exception:
        pass
    cache.set(key, True, time=MONTH)


def is_cmd_delayed(chat_id: int, cmd: str) -> bool:
    delayed_key = f'delayed:{cmd}:{chat_id}'
    delayed = cache.get(delayed_key)
    if delayed:
        return True
    cache.set(delayed_key, True, 5 * 60)  # 5 –º–∏–Ω—É—Ç
    return False


def check_user_is_plohish(update):
    chat_id = update.message.chat_id
    user_id = update.message.from_user.id
    cmd_name = get_command_name(update.message.text)
    disabled = cache.get(f'plohish_cmd:{chat_id}:{user_id}:{cmd_name}')
    if disabled:
        return True
    return False
